install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQLind")
data(iris)
histogram(iris$Sepal.Length)
hist(iris$Sepal.Length)
hist(iris$Sepal.Length)
rug(iris$Sepal.Length)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
install.packages('MySQL')
install.packages('Lattice')
y
install.packages('lattice')
install.packages("RMySQL")
install.packages("RMySQL", type = "source")
install.packages("~/Downloads/RMySQL_0.9-3.tar.gz", repos = NULL, type = "source")
export PKG_CPPFLAGS="-I<MySQL-include-/usr/include/php/ext/mysqlnd>"
export PKG_CPPFLAGS="-I<MySQL-include-"/usr/include/php/ext/mysqlnd">"
export PKG_CPPFLAGS="-I "/usr/include/php/ext/mysqlnd"
export PKG_CPPFLAGS="-I /usr/include/php/ext/mysqlnd "
install.packages("RMySQL",type=source)
install.packages("RMySQL",type="source"")
install.packages("RMySQL",type="source")
install.packages("/Downloads/RMySQL_0.9-3.tar.gz", repos = NULL, type = "source")
exit()
install.packages("RMySQL",type="source")
?unique()
?nchar()
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("RColorBrewer")
?colorRamp()
getwd()
setwd("./datasciencecoursera/exdata-data-NEI_data")
getwd()
NEI <- readRDS("summarySCC_PM25.rds")
?grepl()
SCC <- readRDS("Source_Classification_Code.rds")
good <- grep(".*[cC]oal.*", SCC$SCC.Level.Three, value = TRUE)
good
table(good)
str(good)
summary(good)
good <- grep(".*[cC]oal.*", SCC$SCC.Level.One, value = TRUE)
good <- grep(".*[cC]oal.*", SCC$SCC.Level.Two, value = TRUE)
good <- grep(".*[cC]oal.*", SCC$SCC.Level.Four, value = TRUE)
good
good <- grep(".*[cC]oal.*", SCC$SCC.Level.Three, value = TRUE)
good <- grep(".*[cC]omb.*", SCC$SCC.Level.One, value = TRUE)
unique(good)
good <- grep(".*[cC]omb.*", SCC$SCC.Level.Two, value = TRUE)
unique(good)
good <- grep(".*[cC]omb.*", SCC$SCC.Level.Three, value = TRUE)
good <- grep(".*[cC]omb.*", SCC$SCC.Level.Four, value = TRUE)
unique(good)
names(SCC)
unique(SCC$EI.Sector)
good <- grep(".*[cC]omb.*[cC]oal.*", SCC$EI.Sector, value = TRUE)
unique(good)
good <- grep(".*[cC]omb.*[cC]oal.*", SCC$EI.Sector)
good
SCC$SCC[good,]
SCC[good,]$SC
SCC[good,]$SCC
x1 <- SCC[good,]$SCC
good <- grep(".*[cC]oal.*", SCC$EI.Sector)
x2 <- SCC[good,]$SCC
intersect(x1,x2)
?union()
setdiff(x1,x2)
setdiff(x2,x1)
good <- grep(".*[cC]oal.*", SCC$Short.Name)
x2 <- SCC[good,]$SCC
setdiff(x1,x2)
setdiff(x2,x1)
good <- grep(".*[cC]omb.*[cC]oal.*", SCC$Short.Name)
x2 <- SCC[good,]$SCC
setdiff(x1,x2)
setdiff(x2,x1)
good <- grep(".*[cC]oal.*[cC]omb.*", SCC$Short.Name)
SCC[SCC$SCC == "10101901"]
SCC[SCC$SCC == "10101901",]
good <- grep(".*[cC]oal.*", SCC$EI.Sector, value = TRUE)
good
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
good <- grep(".*[mM]otor.*", SCC$EI.Sector, value = TRUE)
good <- grep(".*[vV]eh.*", SCC$EI.Sector, value = TRUE)
unique(good)
good <- grep(".*[aA]utomob*", SCC$EI.Sector, value = TRUE)
good <- grep(".*[mM]obil*", SCC$EI.Sector, value = TRUE)
unique(good)
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot3.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
?ddply()
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
source('~/.active-rstudio-document')
names(newNEI)
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
names(Balt)
?ddply()
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
nsmes(newNEI)
names(newNEI)
data <- data.frame(newNEI$Emissions, newNEI$year)
tot <- ddply(data, year, summarize, sum = sum(Emissions))
tot <- ddply(data, .year, summarize, sum = sum(Emissions))
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
tot
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
source('~/.active-rstudio-document')
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
source('~/.active-rstudio-document')
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot5.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot5.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot5.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot5.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot5.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot4.R')
tot
source('~/datasciencecoursera/exdata-data-NEI_data/plot6.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot6.R')
tot
source('~/.active-rstudio-document')
tot
Balt$fips
unique(newNEI$fips)
dtr(newNEI$fips)
str(newNEI$fips)
source('~/datasciencecoursera/exdata-data-NEI_data/plot6.R')
head(Balt)
unique(Balt$fips)
tot
source('~/datasciencecoursera/exdata-data-NEI_data/plot6.R')
tot
source('~/datasciencecoursera/exdata-data-NEI_data/plot6.R')
str(Balt)
Balt
head(Balt)
nrow(Balt$fips=="24510")
nrow(Balt$fips==24510)
?nrow()
Balt$fips==24510
?count()
count(Balt)
count(Balt$fips)
source('~/datasciencecoursera/exdata-data-NEI_data/plot6.R')
good <- grep("*[hH]ighw*", SCC$EI.Sector)
good <- grep("*[hH]ighw*", SCC$Short.Name)
unique(good)
str(good)
good1 <- grep("*[vV]eh*", SCC$EI.Sector)
setdiff(good,good1)
x<-setdiff(good,good1)
y<-setdiff(good1,good)
SCC[11643,]
good <- grep(".*[hH]ighway.*", SCC$Short.Name)
x<-setdiff(good,good1)
good
SCC[4302,]
source('~/datasciencecoursera/exdata-data-NEI_data/plot6.R')
source('~/datasciencecoursera/exdata-data-NEI_data/plot5.R')
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",destfile="quiz3q1.csv",method = "curl")
data <- read.csv("quiz3q1.csv")
head(data)
good <- data$ACR==3 & data$AGS == 6
data <- complete.cases(data)
good <- data$ACR==3 & data$AGS == 6
data <- read.csv("quiz3q1.csv")
good <- data$ACR==3 & data$AGS == 6
data <- data[good,]
which(good)
rm(data)
rm(good)
library(jpeg)
library(JPEG)
install.packages("jpeg")
library(jpeg)
readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",native=TRUE)
?readJPEG()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",destfile="pic.jpg",method="curl")
readJPEG("pic.jpg",native=TRUE)
x <- readJPEG("pic.jpg",native=T)
?quantiles()
?quantile()
quantile(x,probs=c(0.3,0.8))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",destfile="quiz3q3data1.csv",method="curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv",destfile="quiz3q3data2.csv",method="curl")
data1 <- read.csv("quiz3q3data1.csv")
data2 <- read.csv("quiz3q3data2.csv")
head(data1)
str(data1)
str(data2)
head(data1)
data1 <- read.csv("quiz3q3data1.csv",skip=4)
head(data1)
str(data1)
summary(data$X)
summary(data1$X)
head(data2)
x <- intersect(data1$X,data2$CountryCode)
summary(data1$X[data1$X != ""])
str(data1$X[data1$X != ""])
?merge()
q <- merge(data1,data2,by.x = X,by.y= CountryCode)
q <- merge(data1,data2,by.x = "X",by.y= "CountryCode")
head(q)
?sort()
sort(q,decreasing = TRUE)
sort(q$X.4,decreasing = TRUE)
class(q$X.4)
q$X4 <- as.numeric(q$X.4)
class(q$X.4)
str(data2)
str(data1)
?transform()
names(data1$X.3)
names(data1$X.4)
data1$X.3
data1$X.4
data1 <- read.csv("quiz3q3data1.csv",skip=4,nrows=190,colClasses = c('Factor','Factor','Factor','Numeric'))
colClasses(data1)
table(data1)
str(data1)
data1 <- read.csv("quiz3q3data1.csv",skip=4,nrows=190,colClasses = c('Factor','Factor','logical','Factor','numeric'))
data1 <- read.csv("quiz3q3data1.csv",skip=4,nlines=190,colClasses = c('Factor','Factor','logical','Factor','numeric'))
data1 <- read.csv("quiz3q3data1.csv")
str(daata1)
str(data1)
?read.csv()
data1 <- read.csv("quiz3q3data1.csv",stringsAsFactors = T)
str(data1)
data1 <- read.csv("quiz3q3data1.csv",skip = 4, stringsAsFactors = T)
str(data1)
data1 <- read.csv("quiz3q3data1.csv",stringsAsFactors = F)
str(data1)
data1 <- read.csv("quiz3q3data1.csv",stringsAsFactors = F, skip =4)
str(data1)
data1 <- read.csv("quiz3q3data1.csv",skip =4, colClasses = c(Factor,Factor,logical,Factor,numeric,Factor,logical,logical,logical,logical))
data1 <- read.csv("quiz3q3data1.csv",skip =4, colClasses = c("Factor","Factor",logical,Factor,numeric,Factor,logical,logical,logical,logical))
data1 <- read.csv("quiz3q3data1.csv",skip =4, colClasses = c("factor","Factor",logical,Factor,numeric,Factor,logical,logical,logical,logical))
data1 <- read.csv("quiz3q3data1.csv",skip =4, colClasses = c("factor","factor",logical,Factor,numeric,Factor,logical,logical,logical,logical))
data1 <- read.csv("quiz3q3data1.csv",skip =4, colClasses = c("factor","factor",logical,factor,numeric,factor,logical,logical,logical,logical))
data1 <- read.csv("quiz3q3data1.csv",skip =4, colClasses = c(factor,factor,logical,factor,numeric,factor,logical,logical,logical,logical))
data1 <- read.csv("quiz3q3data1.csv",skip =4, colClasses = c("factor","factor","logical","factor","numeric","factor",rep("logical",4)))
ncol(data1)
length(c("factor","factor","logical","factor","numeric","factor",rep("logical",4)))
head(data1)
unique(data1)
diim(data1)
dim(data1)
count(data1$X %in% data2%CountryCode)
count(data1$X %in% data2$CountryCode)
count(unique(data1$X) %in% data2$CountryCode)
"EMU" %in% data2$CountryCode
head(q)
tot <- ddply(q, "Income.Group", summarize, means = mean(X.1))
tot
tot <- ddply(complete.cases(q), "Income.Group", summarize, means = mean(X.1))
?complete.cases()
tot <- ddply(q[complete.cases(q),], "Income.Group", summarize, means = mean(X.1))
tot
q[complete.cases(q),]
q<-q[,c(1,2,12)]
head(q)
q[complete.cases(q),]
tot <- ddply(q[complete.cases(q),], "Income.Group", summarize, means = mean(X.1))
tot
tot <- ddply(q[complete.cases(q),], "Income.Group", summarize, means = mean(as.numeric(X.1))
tot <- ddply(q[complete.cases(q),], "Income.Group", summarize, means = mean(as.numeric(X.1)))
tot
q[q[,2]!='',]
tot <- ddply(q[complete.cases(q),], "Income.Group", summarize, means = mean(as.numeric(X.1)))
tot
View(data1)
View(q)
rm(q)
data1 <- read.csv("quiz3q3data1.csv",skip =4, stringAsFactors = F)
data1 <- read.csv("quiz3q3data1.csv",skip =4, stringsAsFactors = F)
str(data1)
data1 <- read.csv("quiz3q3data1.csv",skip =4, stringsAsFactors = F,nrows=234)
tail(data1)
data1 <- read.csv("quiz3q3data1.csv",skip =4, stringsAsFactors = F,nrows=232)
tail(data1)
data1 <- read.csv("quiz3q3data1.csv",skip =4, stringsAsFactors = F,nrows=190)
tail(data1)
data1 <- read.csv("quiz3q3data1.csv",skip =4, stringsAsFactors = F,nrows=191)
tail(data1)
data1 <- read.csv("quiz3q3data1.csv",skip =4, stringsAsFactors = F,nrows=190)
tdata1 <- transform(data1,data1$X.1<-as.numeric(data1$X.1))
str(tdata1)
tdata1 <- tdata1[,1:2]
head(tdata1)
str(data2)
tdata2 <- tdata2[,1:3]
tdata2 <- data2[,1:3]
str(tdata2)
mdata <- merge(tdata1,tdata2,by.x="X",by.y="CountryCode")
head(mdata)
means <- ddply(mdata, "Income.Group", summarize, mean = mean(X.1))
table(means)
means
means
?cut()
mdata2 <- transform(mdata, mdata$X.1 <- factor(cut(mdata$X.1,5)))
str(mdata2)
?factor()
mdata2 <- transform(mdata, mdata$X.1 <- as.factor(cut(mdata$X.1,5)))
str(mdata2)
cut(mdata$X.1,5)
cut(mdata$X.1,breaks = 5)
mdata2 <- transform(mdata, mdata$X.1 <- cut(mdata$X.1,5))
str(mdata2)
mdata$cutranks <- cut(mdata$X.1,5))
mdata$cutranks <- cut(mdata$X.1,5)
str(mdata)
?table()
table(mdata$cutranks,mdata$Income.Group)
table(mdata$Income.Group,mdata$cutranks)
mdata$X.1
sort(mdata$X.1)
length(mdata$X.1)
189/5
table(mdata$cutranks)
table(mdata$Income.Group)
install.packages("reshape2")
library(reshape2)
getwd()
setwd(..)
dir()
setwd("../")
getwd()
dir()
source('~/datasciencecoursera/run_analysis.R')
newData
head(mdata)
head(data)
head(Data)
mdata <- melt(Data, id.vars = c("Subject","Activity"))
head(mdata)
newData <- ddply(mdata, .(Subject,Activity,variable), summarize, mean = mean(value))
head(newData)
str(newDAta)
str(newData)
?unz()
temp <- tempfile()
temp
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip",temp, method = "curl")
trainSet <- read.table(unz(temp,"/train/X_train.txt"))
trainSet <- read.table(unz(temp,"./train/X_train.txt"))
trainSet <- read.table(unz(temp,"train/X_train.txt"))
trainSet <- read.table(unz(temp,"X_train.txt"))
?unzip()
unzip(temp)
trainSet <- read.table(unz(temp,"/train/X_train.txt"))
list.files(unzip(temp))
list.files(temp
)
list.files()
featLabels <- read.table(unz(temp,"features.txt"))
?list.files()
?list.files(path=temp)
list.files(path=temp)
file.exists(temp)
featLabels <- read.table(unz(temp,"features.txt"))
files <- unz(temp)
?unz()
files <- unz(temp,"features.txt")
files
featLabels <-read.table(files)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip",temp, method = "wb")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip",temp)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip",temp,method="auto")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip",temp,method="wget")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip",temp,method="curl",mode="wb")
featLabels <- read.table(unz(temp,"features.txt"))
con<-unz(temp,"features.txt")
con
f <- read.table(con)
f <- readLines(con)
f <- readLines2(con)
unz(temp,"features.txt")
f <- read.table("features.txt")
unzip(temp,"features.txt")
l<-list.files(temp_path)
l<-list.files(tempdir())
l
tempdir()
temp
l<-list.files(temp)
con <- unz(temp,.)
?unzip()
unzip(temp,exdir=getwd())
list.files(getwd())
getwd()
setwd("../")
getwd()
list.files(getwd())
unzip(temp,exdir=getwd())
list.files(getwd())
f<-unz(temp,"UCI HAR Dataset/features.txt")
data <- read.table(f)
data
?write.table()
write.table(newData,file = "TidyDataSet.txt", row.names=F)
source('~/Desktop/Coursera Data Science/Getting and Cleaning Data/run_analysis.R')
newData$variable
unique(newData(variable))
unique(newData$variable)
?narrow()
write.table(newData$variable, "temp.txt", row.names=F)
write.table(unique(newData$variable), "temp.txt", row.names=F)
install.packages(kernlab)
install.packages('kernlab')
library(kernlab)
data(spam)
str(spam[,1:5])
str(spam[,1:7])
names(spam)
set.seed(3435)
trainIndicator = rbinom(4601, size=1, prob=0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator=1,]
trainSpam = spam[trainIndicator==1,]
testSpam = spam[trainIndicator==0,]
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve~trainSpam$type)
plot(log10(trainSpam$capitalAve+1)~trainSpam$type)
plot(log10(trainSpam[,1:4]+1))
install.packages('knitr')
install.packages('markdown')
---
?read.csv()
?data()
setwd('~/GitHub/RR_Proj1')
list.files()
data <- read.csv('activity.csv')
summary(data)
names(data)
aggregate(data$steps, by=list(data$date), FUN = sum)
?hist()
spdd<-aggregate(data$steps, by=list(data$date), FUN = sum)
hist(spdd$x)
hist(spdd$x, breaks = [0,10000,20000,30000])
hist(spdd$x, breaks = [0,10000,20000,30000])
[0,5]
(0,5)
hist(spdd$x, breaks = c(0,10000,20000,30000)
)
1:5:15
1:15 by 5
1:15
1:15:5
0:10 * 2500
bins <- 0:10 * 2500
hist(spdd$x, breaks = bins, main = 'Breakdown of days by number of steps', xlab = 'Number of Steps', ylab = 'Frequency(number of days)', col = BLUE)
hist(spdd$x, breaks = bins, main = 'Breakdown of days by number of steps', xlab = 'Number of Steps', ylab = 'Frequency(number of days)', col = "Blue")
summary(spdd)
mean(spdd$x)
median(spdd$x)
mean(spdd$x, na.rm=TRUE)
median(spdd$x, na.rm=TRUE)
spdd
newspdd <- spdd[complete.cases(spdd)]
newspdd <- spdd[complete.cases(spdd),]
newspdd
completeData <- data[complete.cases(data),]
names(completeData)
averageDayData <- aggregate(completeData$steps, by = list(completeData$interval), FUN = mean)
head(averageDayData)
plot(averageDayData$Group.1 ~ averageDayData$x, type = 'l', main = 'Average Daily Activity Pattern', xlab = 'Time interval (min)', ylab = 'Number of steps')
plot(averageDayData$x ~ averageDayData$Group.1, type = 'l', main = 'Average Daily Activity Pattern', xlab = 'Time interval (min)', ylab = 'Number of steps')
?which.max()
names(averageDayData)
timeOfMax <- [which.max(averageDayData$x),1]
timeOfMax <- averageDayData[which.max(averageDayData$x),1]
timeOfMax
length(which(is.na(data$steps)))
head(data)
?tapply()
newData <- tapply(data$steps,data$interval, function(x) {if(is.na(x){x<-averageDayData[data$interval,2]})})
newData <- tapply(data$steps,data$interval, function(x) {if(is.na(x)){x<-averageDayData[data$interval,2]}})
warnings()
newData <- sapply(data$steps, function(x) {if(is.na(x)){x<-averageDayData[y,2]}}, y = data$intervals)
newData <- sapply(data$steps, function(x,y) {if(is.na(x)){x<-averageDayData[y,2]}}, y = data$intervals)
head(newData)
